
function net = CSCNN_init_DSMM

%%% 17 layers

lr  = [1 0];
lr1 = [1 0];
weightDecay = [1 0];
features = 64;
measurements = 204;
% meanvar  =  [zeros(64,1,'single'), 0.01*ones(64,1,'single')];

% Define network
net.layers = {} ;

net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(1024*measurements))*randn(32,32,1,measurements,'single'), []}}, ...
    'stride', 32, ...
    'pad', 0, ...
    'hasbias', false, ...
    'learningRate',[1 0], ...
    'weightDecay',[1 0], ...
    'opts',{{}}) ;
% net.layers{end+1} = struct('type', 'relu','leak',0) ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(1024*measurements))*randn(1,1,measurements,1024,'single'), zeros(1024,1,'single')}}, ...
    'stride', 1, ...
    'pad', 0, ...
    'learningRate',[1 0], ...
    'weightDecay',[1 0], ...
    'opts',{{}}) ;
net.layers{end+1} = struct('type','bcs_init_rec','dims',[32 32]);
    
net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{sqrt(2/(9*features))*randn(3,3,1,features,'single'), zeros(features,1,'single')}}, ...
        'stride', 1, ...
        'learningRate',lr, ...
        'weightDecay',weightDecay, ...
        'pad', 1, 'opts', {{}}) ;
net.layers{end+1} = struct('type', 'relu','leak',0) ;

if(1)
    for i = 1:1:3
        
        net.layers{end+1} = struct('type', 'conv', ...
            'weights', {{sqrt(2/(9*features*features))*randn(3,3,features,features,'single'), zeros(64,1,'single')}}, ...
            'stride', 1, ...
            'learningRate',lr1, ...
            'weightDecay',weightDecay, ...
            'pad', 1, 'opts', {{}}) ;
        
        %     net.layers{end+1} = struct('type', 'bnorm', ...
        %         'weights', {{sqrt(2/(9*64))*randn(64,1,'single'), zeros(64,1,'single'),meanvar}}, ...
        %         'learningRate', [1 1 1], ...
        %         'weightDecay', [0 0], ...
        %         'opts', {{}}) ;
        net.layers{end+1} = struct('type', 'relu','leak',0) ;
        
    end
end

net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(9*features))*randn(3,3,features,1,'single'), zeros(1,1,'single')}}, ...
    'stride', 1, ...
    'learningRate',lr, ...
    'weightDecay',weightDecay, ...
    'pad', 1, 'opts', {{}}) ;

net.layers{end+1} = struct('type', 'loss') ; % make sure the new 'vl_nnloss.m' is in the same folder.

% Fill in default values
net = vl_simplenn_tidy(net);
